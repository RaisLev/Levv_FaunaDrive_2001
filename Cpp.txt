#include "stdafx.h"
#include <iostream> 
#include <iomanip>
using namespace std;

#define MAXWEIGHT 0x7FFFFFFFE
#define MAXINT 0x7FFFFFFFF

struct _Graph
{
 	int n; //êîëëè÷åñòâî óçëîâ 
	int **m; //ìàòð ñìåæíîñòè
	int *d; //ðàññòîÿíèå 
	bool *visited; //áûë ïîñåùåí
};

typedef _Graph *Graph;


Graph graphCreate(int maxn) {

	Graph g = new _Graph;
	g -> visited = new bool[maxn];
	g -> d = new int[maxn];
	g -> n = maxn;
	g -> m = new int*[maxn];

	for (int i = 0; i < maxn; i++){
		g -> m[i] = new int[maxn];

		for (int j = 0; j < maxn; j++){
			g -> m[i][j] = 0;
		}
	}
	return g;

}

int graphGetMinNode(Graph g,  int v){
	int ret =-1;
	int min = MAXINT;

	for(int i = 0; i < g -> n; i++){
		if(g -> m[v][i] && !(g->visited[i])){
			if(g -> d[i] < min) {
				min = g -> d[i];
				ret = i;
			}
		}
	}

	return ret;
}

bool graphDijkstra(Graph g, int v){

	for (int i = 0; i < g -> n; i++){
		g -> visited[i] = false;
		g -> d[i] = MAXWEIGHT;
	}

	g -> d[v] = 0;

	do{
		for(int i =0; i < g->n; i++){
			if(g->m[v][i] != 0 && !(g->visited[i])){

				if(g->m[v][i] + g-> d[v] < g-> d[i]){
					g-> d[i] = g->m[v][i] + g-> d[v];


				}
			}
		}
		g -> visited[v] = true;

	} while ((v = graphGetMinNode(g,v))>=0);
	return true;

} 


bool graphAdd(Graph g, int v, int u, int w, bool flag) {

	g -> m[v][u] = w;
	if(flag) g -> m[u][v] = w;

	return true;
}

bool graphShow(Graph g){

	for (int i = 0; i < g -> n; i++) {
		for (int j = 0; j < g -> n; j++) {
			cout << setw(5) << g -> m [i][j] << "  " ;
		}
		cout << g -> d[i];
		cout << endl;
	}

	return true;
}


int _tmain(int argc, _TCHAR* argv[]) {

	Graph g = graphCreate(6);
	graphAdd(g, 0, 1, 7, true);
	graphAdd(g, 0, 5, 14, true);
	graphAdd(g, 0, 2, 9, true);

	graphAdd(g, 1, 3, 15, true);
	graphAdd(g, 1, 2, 10, true);

	graphAdd(g, 2, 3, 11, true);
	graphAdd(g, 2, 5, 2, true);

	graphAdd(g, 3, 4, 6, true);

	graphAdd(g, 4, 5, 9, true);



	graphShow(g);
	cout << endl;
	graphDijkstra(g,0);
	graphShow(g);



	system("pause");
	return 0;
}